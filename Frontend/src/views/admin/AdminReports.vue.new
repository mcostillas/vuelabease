<template>
  <DashboardLayout>
    <AdminHeader pageTitle="Reports" />
    <div class="reports-container">
      <!-- Laboratory Usage Section -->
      <div class="report-section">
        <div class="section-header">
          <h2>Laboratory Usage</h2>
          <div class="section-actions">
            <div class="filter-container">
              <select v-model="selectedSemester" class="filter-select">
                <option value="all">All Semesters</option>
                <option value="1">First Semester</option>
                <option value="2">Second Semester</option>
              </select>
              <button class="action-button" @click="exportLabUsage">
                <i class="fas fa-download"></i> Export
              </button>
            </div>
          </div>
        </div>
        
        <div class="usage-bars">
          <div class="usage-bar-item" v-for="room in labUsageData" :key="room.id">
            <div class="usage-bar-header">
              <div class="usage-name">Lab {{ room.id }}</div>
              <div class="usage-value">{{ room.hours }} hours</div>
            </div>
            <div class="usage-bar-container">
              <div class="usage-bar" 
                   :style="{ width: (room.hours / getMaxHours() * 100) + '%', backgroundColor: getBarColor(room.hours) }"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Attendance Statistics Section -->
      <div class="report-section">
        <div class="section-header">
          <h2>Attendance Statistics</h2>
          <div class="section-actions">
            <div class="filter-container">
              <select v-model="selectedAttendancePeriod" class="filter-select">
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="semester">This Semester</option>
                <option value="custom">Custom Range</option>
              </select>
              <div v-if="selectedAttendancePeriod === 'custom'" class="date-range-picker">
                <input type="date" v-model="selectedDateRange.start" class="date-input" />
                <span>to</span>
                <input type="date" v-model="selectedDateRange.end" class="date-input" />
              </div>
              <select v-model="selectedDepartment" class="filter-select">
                <option value="">All Departments</option>
                <option v-for="dept in departments" :key="dept" :value="dept">{{ dept }}</option>
              </select>
              <select v-model="selectedInstructor" class="filter-select">
                <option value="">All Instructors</option>
                <option v-for="instructor in instructors" :key="instructor" :value="instructor">{{ instructor }}</option>
              </select>
              <button class="action-button" @click="exportAttendanceStats">
                <i class="fas fa-download"></i> Export
              </button>
            </div>
          </div>
        </div>
        
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-icon late-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 8V12L15 15M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#DC2626" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="stat-content">
              <div class="stat-label">Total Late Entries</div>
              <div class="stat-value">{{ lateEntriesCount }}</div>
              <div class="stat-detail">Average: {{ averageLateness }} minutes</div>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-icon overtime-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 8V12L9 15M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#2563EB" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="stat-content">
              <div class="stat-label">Total Overtime Entries</div>
              <div class="stat-value">{{ overtimeEntriesCount }}</div>
              <div class="stat-detail">Average: {{ averageOvertime }} minutes</div>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-icon punctual-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5 13L9 17L19 7M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#10B981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="stat-content">
              <div class="stat-label">Punctual Entries</div>
              <div class="stat-value">{{ punctualEntriesCount }}</div>
              <div class="stat-detail">{{ punctualPercentage }}% of total</div>
            </div>
          </div>
        </div>
        
        <div class="attendance-table">
          <div class="table-header">
            <div class="header-cell">Instructor</div>
            <div class="header-cell">Department</div>
            <div class="header-cell">Date</div>
            <div class="header-cell">Scheduled Start</div>
            <div class="header-cell">Scheduled End</div>
            <div class="header-cell">Time In</div>
            <div class="header-cell">Time Out</div>
            <div class="header-cell">Late</div>
            <div class="header-cell">Overtime</div>
          </div>
          
          <div class="table-body">
            <div class="table-row" v-for="entry in filteredAttendanceData" :key="entry.id">
              <div class="table-cell">{{ entry.name }}</div>
              <div class="table-cell">{{ entry.department }}</div>
              <div class="table-cell">{{ entry.date }}</div>
              <div class="table-cell">{{ entry.scheduledStart }}</div>
              <div class="table-cell">{{ entry.scheduledEnd }}</div>
              <div class="table-cell">{{ entry.timeIn }}</div>
              <div class="table-cell">{{ entry.manualTimeOut || entry.timeOut || '-' }}</div>
              <div class="table-cell">
                <span v-if="calculateLateness(entry)" class="late-badge">{{ calculateLateness(entry) }} min</span>
                <span v-else>-</span>
              </div>
              <div class="table-cell">
                <span v-if="calculateOvertime(entry)" class="overtime-badge">{{ calculateOvertime(entry) }} min</span>
                <span v-else>-</span>
              </div>
            </div>
            
            <div v-if="filteredAttendanceData.length === 0" class="empty-table">
              <p>No attendance data available for the selected filters.</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Bookings Information Section -->
      <div class="report-section">
        <div class="section-header">
          <h2>Bookings Information</h2>
          <div class="section-actions">
            <div class="filter-container">
              <select v-model="selectedBookingPeriod" class="filter-select">
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="semester">This Semester</option>
              </select>
              <button class="action-button" @click="exportBookings">
                <i class="fas fa-download"></i> Export
              </button>
            </div>
          </div>
        </div>
        
        <div class="metrics-grid">
          <div class="metric-card">
            <div class="metric-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H17C18.1046 21 19 20.1046 19 19V7C19 5.89543 18.1046 5 17 5H15M9 5C9 6.10457 9.89543 7 11 7H13C14.1046 7 15 6.10457 15 5M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5M12 12H15M12 16H15M9 12H9.01M9 16H9.01" stroke="#DD3859" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </div>
            <div class="metric-content">
              <div class="metric-value">{{ bookingStats.totalBookings }}</div>
              <div class="metric-label">Total Bookings</div>
              <div class="metric-trend positive">
                +{{ bookingStats.growth }} from last period
              </div>
            </div>
          </div>
          
          <div class="metric-card">
            <div class="metric-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 8V12L9 15M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#DD3859" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="metric-content">
              <div class="metric-value">{{ bookingStats.avgDuration }}</div>
              <div class="metric-label">Average Duration</div>
              <div class="metric-detail">
                Per booking
              </div>
            </div>
          </div>
          
          <div class="metric-card">
            <div class="metric-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 21V5C19 3.89543 18.1046 3 17 3H7C5.89543 3 5 3.89543 5 5V21M19 21L21 21M19 21H14M5 21L3 21M5 21H10M9 7H10M9 11H10M14 7H15M14 11H15M10 21V16C10 15.4477 10.4477 15 11 15H13C13.5523 15 14 15.4477 14 16V21M10 21H14" stroke="#DD3859" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="metric-content">
              <div class="metric-value">{{ bookingStats.mostBookedLab }}</div>
              <div class="metric-label">Most Booked Lab</div>
              <div class="metric-detail">
                {{ bookingStats.mostBookedCount }} bookings
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- User Statistics Section -->
      <div class="report-section">
        <div class="section-header">
          <h2>User Statistics</h2>
          <div class="section-actions">
            <button class="action-button" @click="exportUserStats">
              <i class="fas fa-download"></i> Export
            </button>
          </div>
        </div>
        
        <div class="metrics-grid">
          <div class="metric-card">
            <div class="metric-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M17 20H22V18C22 16.3431 20.6569 15 19 15C18.0444 15 17.1931 15.4468 16.6438 16.1429M17 20H7M17 20V18C17 17.3438 16.8736 16.717 16.6438 16.1429M7 20H2V18C2 16.3431 3.34315 15 5 15C5.95561 15 6.80686 15.4468 7.35625 16.1429M7 20V18C7 17.3438 7.12642 16.717 7.35625 16.1429M7.35625 16.1429C8.0935 14.301 9.89482 13 12 13C14.1052 13 15.9065 14.301 16.6438 16.1429M15 7C15 8.65685 13.6569 10 12 10C10.3431 10 9 8.65685 9 7C9 5.34315 10.3431 4 12 4C13.6569 4 15 5.34315 15 7ZM21 10C21 11.1046 20.1046 12 19 12C17.8954 12 17 11.1046 17 10C17 8.89543 17.8954 8 19 8C20.1046 8 21 8.89543 21 10ZM7 10C7 11.1046 6.10457 12 5 12C3.89543 12 3 11.1046 3 10C3 8.89543 3.89543 8 5 8C6.10457 8 7 8.89543 7 10Z" stroke="#DD3859" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="metric-content">
              <div class="metric-value">{{ userStats.totalUsers }}</div>
              <div class="metric-label">Total Users</div>
              <div class="metric-detail">
                {{ userStats.activeUsers }} active this month
              </div>
            </div>
          </div>
          
          <div class="metric-card">
            <div class="metric-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M16 7C16 9.20914 14.2091 11 12 11C9.79086 11 8 9.20914 8 7C8 4.79086 9.79086 3 12 3C14.2091 3 16 4.79086 16 7Z" stroke="#DD3859" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M12 14C8.13401 14 5 17.134 5 21H19C19 17.134 15.866 14 12 14Z" stroke="#DD3859" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="metric-content">
              <div class="metric-value">{{ userStats.mostActiveUser }}</div>
              <div class="metric-label">Most Active User</div>
              <div class="metric-detail">
                {{ userStats.mostActiveCount }} sessions
              </div>
            </div>
          </div>
          
          <div class="metric-card">
            <div class="metric-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 17H15M9 13H15M9 9H10M19 21V5C19 3.89543 18.1046 3 17 3H7C5.89543 3 5 3.89543 5 5V21M19 21H5M19 21H21M5 21H3" stroke="#DD3859" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </div>
            <div class="metric-content">
              <div class="metric-value">{{ userStats.avgSessions }}</div>
              <div class="metric-label">Avg. Sessions</div>
              <div class="metric-detail">
                Per user
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Notification -->
    <div class="notification" :class="[notification.type, { show: notification.show }]">
      {{ notification.message }}
    </div>
  </DashboardLayout>
</template>

<script>
import DashboardLayout from '@/components/layout/DashboardLayout.vue';
import AdminHeader from '@/components/admin/AdminHeader.vue';

export default {
  name: 'AdminReports',
  components: {
    DashboardLayout,
    AdminHeader
  },
  data() {
    // Get current date in YYYY-MM-DD format
    const today = new Date().toISOString().split('T')[0];
    
    // Get date for one month ago
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    const startDate = oneMonthAgo.toISOString().split('T')[0];
    
    // Get yesterday's date
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayStr = yesterday.toISOString().split('T')[0];
    
    // Get date from two days ago
    const twoDaysAgo = new Date();
    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
    const twoDaysAgoStr = twoDaysAgo.toISOString().split('T')[0];
    
    return {
      // Filter selections
      selectedSemester: 'all',
      selectedAttendancePeriod: 'month',
      selectedBookingPeriod: 'month',
      selectedInstructor: '',
      selectedDepartment: '',
      selectedDateRange: {
        start: startDate,
        end: today
      },
      
      // Laboratory usage data
      labUsageData: [
        { id: 1, hours: 120 },
        { id: 2, hours: 85 },
        { id: 3, hours: 150 },
        { id: 4, hours: 60 },
        { id: 5, hours: 95 }
      ],
      
      // Attendance data
      attendanceData: [
        {
          id: "14230206",
          name: 'Marc Maurice Costillas',
          department: 'College of Computer Studies',
          date: today,
          scheduledStart: '08:00 AM',
          scheduledEnd: '12:00 PM',
          timeIn: '08:30 AM',
          timeOut: '12:30 PM',
          status: 'out',
          subject: 'Web Development',
          section: 'BSIT-3A',
          autoLogout: false
        },
        {
          id: "14409518",
          name: 'Mark Anthony Nisnea',
          department: 'College of Computer Studies',
          date: today,
          scheduledStart: '09:00 AM',
          scheduledEnd: '12:00 PM',
          timeIn: '09:15 AM',
          timeOut: null,
          status: 'in',
          subject: 'Database Management',
          section: 'BSIT-3B',
          autoLogout: false
        },
        {
          id: "16864846",
          name: 'Rockford Jade Dagohoy',
          department: 'College of Computer Studies',
          date: today,
          scheduledStart: '08:00 AM',
          scheduledEnd: '03:00 PM',
          timeIn: '08:00 AM',
          timeOut: '03:45 PM',
          status: 'out',
          subject: 'Digital Electronics',
          section: 'BSIT-3A',
          autoLogout: false
        },
        {
          id: "12345678",
          name: 'Emily Davis',
          department: 'College of Computer Studies',
          date: yesterdayStr,
          scheduledStart: '09:00 AM',
          scheduledEnd: '04:00 PM',
          timeIn: '10:00 AM',
          timeOut: '04:00 PM',
          manualTimeOut: '04:35 PM',
          status: 'out',
          subject: 'Data Structures',
          section: 'BSIT-3C',
          autoLogout: true
        },
        {
          id: "01641066",
          name: 'Maria Rodriguez',
          department: 'College of Computer Studies',
          date: yesterdayStr,
          scheduledStart: '08:30 AM',
          scheduledEnd: '04:00 PM',
          timeIn: '08:30 AM',
          timeOut: '04:30 PM',
          status: 'out',
          subject: 'Network Security',
          section: 'BSIT-4A',
          autoLogout: false
        },
        {
          id: "87654321",
          name: 'John Smith',
          department: 'College of Computer Studies',
          date: twoDaysAgoStr,
          scheduledStart: '10:00 AM',
          scheduledEnd: '01:00 PM',
          timeIn: '10:05 AM',
          timeOut: '01:00 PM',
          status: 'out',
          subject: 'Software Engineering',
          section: 'BSIT-4B',
          autoLogout: true
        }
      ],
      
      departments: ['College of Computer Studies', 'College of Engineering', 'College of Science'],
      instructors: ['Marc Maurice Costillas', 'Mark Anthony Nisnea', 'Rockford Jade Dagohoy', 'Emily Davis', 'Maria Rodriguez', 'John Smith'],
      
      // Bookings statistics
      bookingStats: {
        totalBookings: 245,
        growth: '12%',
        avgDuration: '2.5 hours',
        mostBookedLab: 'Lab 3',
        mostBookedCount: 68
      },
      
      // User statistics
      userStats: {
        totalUsers: 450,
        activeUsers: 320,
        mostActiveUser: 'John Doe',
        mostActiveCount: 15,
        avgSessions: 3.2
      },
      
      // Notification
      notification: {
        show: false,
        message: '',
        type: 'success'
      }
    };
  },
  computed: {
    // Filtered attendance data based on selected filters
    filteredAttendanceData() {
      if (!this.attendanceData || !Array.isArray(this.attendanceData)) {
        return [];
      }
      
      let filtered = this.attendanceData.slice(); // Create a copy of the array
      
      // Filter by date range
      if (this.selectedAttendancePeriod === 'custom' && this.selectedDateRange.start && this.selectedDateRange.end) {
        filtered = filtered.filter(entry => {
          return entry.date >= this.selectedDateRange.start && entry.date <= this.selectedDateRange.end;
        });
      } else if (this.selectedAttendancePeriod === 'week') {
        // Filter for current week
        const today = new Date();
        const firstDayOfWeek = new Date(today);
        firstDayOfWeek.setDate(today.getDate() - today.getDay()); // Sunday
        const firstDayStr = firstDayOfWeek.toISOString().split('T')[0];
        const todayStr = today.toISOString().split('T')[0];
        
        filtered = filtered.filter(entry => {
          return entry.date >= firstDayStr && entry.date <= todayStr;
        });
      } else if (this.selectedAttendancePeriod === 'month') {
        // Filter for current month
        const today = new Date();
        const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const firstDayStr = firstDayOfMonth.toISOString().split('T')[0];
        const todayStr = today.toISOString().split('T')[0];
        
        filtered = filtered.filter(entry => {
          return entry.date >= firstDayStr && entry.date <= todayStr;
        });
      } else if (this.selectedAttendancePeriod === 'semester') {
        // Assuming semester is roughly 4 months
        const today = new Date();
        const firstDayOfSemester = new Date(today);
        firstDayOfSemester.setMonth(today.getMonth() - 4);
        const firstDayStr = firstDayOfSemester.toISOString().split('T')[0];
        const todayStr = today.toISOString().split('T')[0];
        
        filtered = filtered.filter(entry => {
          return entry.date >= firstDayStr && entry.date <= todayStr;
        });
      }
      
      // Filter by instructor
      if (this.selectedInstructor) {
        filtered = filtered.filter(entry => entry.name === this.selectedInstructor);
      }
      
      // Filter by department
      if (this.selectedDepartment) {
        filtered = filtered.filter(entry => entry.department === this.selectedDepartment);
      }
      
      return filtered;
    },
    
    // Statistics computed properties
    lateEntriesCount() {
      return this.filteredAttendanceData.filter(entry => this.calculateLateness(entry) !== null).length;
    },
    
    averageLateness() {
      const lateEntries = this.filteredAttendanceData.filter(entry => this.calculateLateness(entry) !== null);
      if (lateEntries.length === 0) return 0;
      
      const totalLateMinutes = lateEntries.reduce((sum, entry) => sum + this.calculateLateness(entry), 0);
      return Math.round(totalLateMinutes / lateEntries.length);
    },
    
    overtimeEntriesCount() {
      return this.filteredAttendanceData.filter(entry => this.calculateOvertime(entry) !== null).length;
    },
    
    averageOvertime() {
      const overtimeEntries = this.filteredAttendanceData.filter(entry => this.calculateOvertime(entry) !== null);
      if (overtimeEntries.length === 0) return 0;
      
      const totalOvertimeMinutes = overtimeEntries.reduce((sum, entry) => sum + this.calculateOvertime(entry), 0);
      return Math.round(totalOvertimeMinutes / overtimeEntries.length);
    },
    
    punctualEntriesCount() {
      return this.filteredAttendanceData.filter(entry => this.calculateLateness(entry) === null && entry.timeIn).length;
    },
    
    punctualPercentage() {
      const totalEntries = this.filteredAttendanceData.filter(entry => entry.timeIn).length;
      if (totalEntries === 0) return 0;
      
      return Math.round((this.punctualEntriesCount / totalEntries) * 100);
    }
  },
  methods: {
    // Get color for usage bar based on hours
    getBarColor(hours) {
      if (hours > 120) return '#DD3859'; // High usage
      if (hours > 80) return '#F59E0B';  // Medium usage
      return '#10B981';                  // Low usage
    },
    
    // Get maximum hours for scaling the bars
    getMaxHours() {
      return Math.max(...this.labUsageData.map(lab => lab.hours));
    },
    
    // Convert time string (e.g., "08:30 AM") to minutes since midnight
    convertTimeToMinutes(timeStr) {
      if (!timeStr) return 0;
      
      const [time, period] = timeStr.split(' ');
      let [hours, minutes] = time.split(':').map(Number);
      
      // Convert to 24-hour format
      if (period === 'PM' && hours < 12) {
        hours += 12;
      } else if (period === 'AM' && hours === 12) {
        hours = 0;
      }
      
      return hours * 60 + minutes;
    },
    
    // Calculate lateness in minutes
    calculateLateness(entry) {
      if (!entry.timeIn || !entry.scheduledStart) return null;
      
      const scheduledTime = this.convertTimeToMinutes(entry.scheduledStart);
      const actualTime = this.convertTimeToMinutes(entry.timeIn);
      
      // If the actual time is later than scheduled time, calculate the difference
      if (actualTime > scheduledTime) {
        return actualTime - scheduledTime;
      }
      
      return null; // Not late
    },
    
    // Calculate overtime in minutes
    calculateOvertime(entry) {
      // Use manual time-out if available, otherwise use regular time-out
      const timeOut = entry.manualTimeOut || entry.timeOut;
      if (!timeOut || !entry.scheduledEnd) return null;
      
      const scheduledTime = this.convertTimeToMinutes(entry.scheduledEnd);
      const actualTime = this.convertTimeToMinutes(timeOut);
      
      // If the actual time is later than scheduled time, calculate the difference
      if (actualTime > scheduledTime) {
        return actualTime - scheduledTime;
      }
      
      return null; // No overtime
    },
    
    // Export functions
    exportLabUsage() {
      // Implementation for exporting lab usage data
      this.showNotification('Lab usage data exported successfully');
    },
    
    exportAttendanceStats() {
      // Implementation for exporting attendance statistics
      this.showNotification('Attendance statistics exported successfully');
    },
    
    exportBookings() {
      // Implementation for exporting bookings data
      this.showNotification('Bookings data exported successfully');
    },
    
    exportUserStats() {
      this.showNotification('User statistics exported successfully');
    },
    
    // Show notification
    showNotification(message, type = 'success') {
      this.notification.message = message;
      this.notification.type = type;
      this.notification.show = true;
      
      setTimeout(() => {
        this.notification.show = false;
      }, 3000);
    }
  }
};
</script>

<style scoped>
.reports-container {
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.report-section {
  display: flex;
  flex-direction: column;
  gap: 24px;
  padding: 24px;
  background-color: white;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.section-header h2 {
  font-size: 20px;
  font-weight: 600;
  color: #1e293b;
  margin: 0;
}

.section-actions {
  display: flex;
  align-items: center;
}

.filter-container {
  display: flex;
  align-items: center;
  gap: 12px;
}

.filter-select {
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  color: #1e293b;
  background-color: white;
  cursor: pointer;
}

.filter-select:focus {
  outline: none;
  border-color: #DD3859;
}

.action-button {
  display: flex;
  align-items: center;
  gap: 8px;
  background-color: #DD3859;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 8px 16px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
}

.action-button:hover {
  background-color: #c9314f;
}

/* Date Range Picker */
.date-range-picker {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-right: 12px;
}

.date-input {
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  color: #1e293b;
  background-color: white;
}

.date-input:focus {
  outline: none;
  border-color: #DD3859;
}

/* Laboratory Usage Bars */
.usage-bars {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.usage-bar-item {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.usage-bar-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.usage-name {
  font-size: 14px;
  font-weight: 500;
  color: #1e293b;
}

.usage-value {
  font-size: 14px;
  font-weight: 600;
  color: #DD3859;
}

.usage-bar-container {
  height: 12px;
  background-color: #f1f5f9;
  border-radius: 6px;
  overflow: hidden;
}

.usage-bar {
  height: 100%;
  background-color: #DD3859;
  border-radius: 6px;
  transition: width 0.5s ease;
}

/* Attendance Table */
.attendance-table {
  width: 100%;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  overflow: hidden;
  margin-top: 16px;
}

.table-header {
  display: grid;
  grid-template-columns: 1.5fr 1.5fr 1fr 1fr 1fr 1fr 1fr 0.8fr 0.8fr;
  background-color: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
}

.header-cell {
  padding: 12px 16px;
  font-weight: 600;
  font-size: 14px;
  color: #64748b;
  text-align: left;
}

.table-body {
  max-height: 400px;
  overflow-y: auto;
}

.table-row {
  display: grid;
  grid-template-columns: 1.5fr 1.5fr 1fr 1fr 1fr 1fr 1fr 0.8fr 0.8fr;
  border-bottom: 1px solid #e2e8f0;
}

.table-row:last-child {
  border-bottom: none;
}

.table-cell {
  padding: 12px 16px;
  font-size: 14px;
  color: #1e293b;
}

.late-badge, .overtime-badge {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

.late-badge {
  background-color: #FEE2E2;
  color: #DC2626;
}

.overtime-badge {
  background-color: #DBEAFE;
  color: #2563EB;
}

.empty-table {
  padding: 24px;
  text-align: center;
  color: #64748b;
  font-size: 14px;
}

/* Stats Grid */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
  margin-bottom: 24px;
}

.stat-card {
  background-color: white;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  padding: 20px;
  display: flex;
  align-items: center;
  gap: 16px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.05);
}

.stat-icon {
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 12px;
}

.late-icon {
  background-color: #FEE2E2;
}

.overtime-icon {
  background-color: #DBEAFE;
}

.punctual-icon {
  background-color: #D1FAE5;
}

.stat-content {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.stat-label {
  font-size: 14px;
  font-weight: 500;
  color: #64748b;
}

.stat-value {
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
}

.stat-detail {
  font-size: 12px;
  color: #94a3b8;
}

/* Metrics Grid */
.metrics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
}

.metric-card {
  background-color: white;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  padding: 20px;
  display: flex;
  align-items: center;
  gap: 16px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.metric-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.05);
}

.metric-icon {
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #FFF1F3;
  border-radius: 12px;
}

.metric-content {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.metric-value {
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
}

.metric-label {
  font-size: 14px;
  font-weight: 500;
  color: #64748b;
}

.metric-trend {
  font-size: 12px;
  font-weight: 500;
}

.metric-trend.positive {
  color: #10B981;
}

.metric-trend.negative {
  color: #DD3859;
}

.metric-detail {
  font-size: 12px;
  color: #94a3b8;
}

/* Notification Styling */
.notification {
  position: fixed;
  bottom: 24px;
  right: 24px;
  padding: 12px 24px;
  border-radius: 8px;
  background-color: white;
  color: #1e293b;
  border: 2px solid #DD3859;
  font-size: 14px;
  font-weight: 500;
  transform: translateY(100px);
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 1001;
  font-family: 'Poppins', sans-serif;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.notification.show {
  transform: translateY(0);
  opacity: 1;
}

/* Responsive Design */
@media (max-width: 768px) {
  .metrics-grid, .stats-grid {
    grid-template-columns: 1fr;
  }
  
  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 12px;
  }
  
  .filter-container {
    width: 100%;
    flex-direction: column;
    align-items: stretch;
  }
  
  .date-range-picker {
    flex-direction: column;
    width: 100%;
  }
  
  .date-input {
    width: 100%;
  }
  
  .action-button {
    width: 100%;
    justify-content: center;
  }
  
  .table-header, .table-row {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .header-cell, .table-cell {
    padding: 8px;
  }
  
  .header-cell:nth-child(n+4), .table-cell:nth-child(n+4) {
    display: none;
  }
}
</style>
